# Generated by Django 5.2.5 on 2025-10-04 09:30

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DiscordUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discord_id', models.CharField(max_length=255, unique=True)),
                ('nick', models.CharField(max_length=255)),
                ('display_name', models.CharField(max_length=255, null=True)),
                ('avatar', models.CharField(max_length=255, null=True)),
                ('access_token', models.CharField(max_length=255)),
                ('refresh_token', models.CharField(blank=True, max_length=255)),
                ('token_expires_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='UnauthorizedOsuUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('osu_id', models.CharField(max_length=255, unique=True)),
                ('nick', models.CharField(default='', max_length=255)),
                ('avatar_url', models.URLField(blank=True, max_length=255, null=True)),
                ('region', models.CharField(choices=[('SA', 'Республика Саха'), ('KHA', 'Хабаровский край'), ('PRI', 'Приморский край'), ('AMU', 'Амурская область'), ('MAG', 'Магаданская область'), ('SAK', 'Сахалинская область'), ('CHU', 'Чукотский автономный округ'), ('KAM', 'Камчатский край'), ('YEV', 'Еврейская автономная область'), ('BU', 'Республика Бурятия'), ('ZAB', 'Забайкальский край')], max_length=3, null=True)),
                ('cities', models.CharField(choices=[('BLG', 'Благовещенск'), ('BEL', 'Белогорск'), ('SVO', 'Свободный'), ('TYN', 'Тында'), ('ZEY', 'Зея'), ('SHI', 'Шимановск'), ('RAY', 'Райчихинск'), ('ZAV', 'Завитинск'), ('SKO', 'Сковородино'), ('ULU', 'Улан-Удэ'), ('SEV', 'Северобайкальск'), ('GUS', 'Гусиноозёрск'), ('KYA', 'Кяхта'), ('ZAK', 'Закаменск'), ('BAB', 'Бабушкин'), ('BIR', 'Биробиджан'), ('OBL', 'Облучье'), ('CHI', 'Чита'), ('KRK', 'Краснокаменск'), ('BOR', 'Борзя'), ('PTZ', 'Петровск-Забайкальский'), ('NER', 'Нерчинск'), ('MOG', 'Могоча'), ('SHL', 'Шилка'), ('BAL', 'Балей'), ('HIL', 'Хилок'), ('SRE', 'Сретенск'), ('PTK', 'Петропавловск-Камчатский'), ('ELZ', 'Елизово'), ('VIL', 'Вилючинск'), ('MAG', 'Магадан'), ('SUS', 'Сусуман'), ('VLA', 'Владивосток'), ('USS', 'Уссурийск'), ('NAH', 'Находка'), ('ART', 'Артём'), ('ARS', 'Арсеньев'), ('SPA', 'Спасск-Дальний'), ('BKA', 'Большой Камень'), ('PAR', 'Партизанск'), ('LES', 'Лесозаводск'), ('DLG', 'Дальнегорск'), ('DLR', 'Дальнереченск'), ('FOK', 'Фокино'), ('YAK', 'Якутск'), ('NYU', 'Нерюнгри'), ('MIR', 'Мирный'), ('LEN', 'Ленск'), ('UDC', 'Удачный'), ('VLY', 'Вилюйск'), ('NYR', 'Нюрба'), ('POK', 'Покровск'), ('OLE', 'Олёкминск'), ('TOM', 'Томмот'), ('SRK', 'Среднеколымск'), ('VER', 'Верхоянск'), ('YUS', 'Южно-Сахалинск'), ('KOR', 'Корсаков'), ('KHM', 'Холмск'), ('OHA', 'Оха'), ('POR', 'Поронайск'), ('DOL', 'Долинск'), ('NEV', 'Невельск'), ('ANV', 'Анива'), ('ALS', 'Александровск-Сахалинский'), ('UGL', 'Углегорск'), ('SHA', 'Шахтёрск'), ('MAK', 'Макаров'), ('TMR', 'Томари'), ('SKU', 'Северо-Курильск'), ('KUR', 'Курильск'), ('KHA', 'Хабаровск'), ('KOM', 'Комсомольск-на-Амуре'), ('AMU', 'Амурск'), ('SGA', 'Советская Гавань'), ('NIK', 'Николаевск-на-Амуре'), ('BIK', 'Бикин'), ('VYA', 'Вяземский'), ('ANA', 'Анадырь'), ('BIL', 'Билибино'), ('PEV', 'Певек')], max_length=3, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='OsuUsers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_token', models.CharField(max_length=255)),
                ('refresh_token', models.CharField(blank=True, max_length=255)),
                ('token_expires_at', models.DateTimeField()),
                ('osu', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tokens', to='Accounts.unauthorizedosuusers')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('identifier', models.CharField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_linked', models.BooleanField(default=False)),
                ('avatar_source', models.CharField(blank=True, choices=[('osu', 'Osu!'), ('discord', 'Discord')], max_length=10, null=True)),
                ('nick_source', models.CharField(blank=True, choices=[('osu', 'Osu!'), ('discord_username', 'Discord Username'), ('discord_display_name', 'Discord Display Name')], max_length=20, null=True)),
                ('discord_user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user', to='Accounts.discordusers')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('osu_user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user', to='Accounts.osuusers')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
